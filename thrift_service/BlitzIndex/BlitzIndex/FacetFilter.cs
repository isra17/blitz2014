/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Filtre sur une facette. Vous devez uniquement retourner des resultats qui, pour les metadata
  /// fournis contiennent une des valeurs fournies. Voir la documentation pour plus d'information.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FacetFilter : TBase
  {
    private string _metadataName;
    private List<string> _values;

    /// <summary>
    /// Le nom du metadata sur lequel le filtre s'applique.
    /// </summary>
    public string MetadataName
    {
      get
      {
        return _metadataName;
      }
      set
      {
        __isset.metadataName = true;
        this._metadataName = value;
      }
    }

    /// <summary>
    /// Les valeurs acceptees pour ce metadata.
    /// </summary>
    public List<string> Values
    {
      get
      {
        return _values;
      }
      set
      {
        __isset.values = true;
        this._values = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool metadataName;
      public bool values;
    }

    public FacetFilter() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MetadataName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Values = new List<string>();
                TList _list56 = iprot.ReadListBegin();
                for( int _i57 = 0; _i57 < _list56.Count; ++_i57)
                {
                  string _elem58 = null;
                  _elem58 = iprot.ReadString();
                  Values.Add(_elem58);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FacetFilter");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MetadataName != null && __isset.metadataName) {
        field.Name = "metadataName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MetadataName);
        oprot.WriteFieldEnd();
      }
      if (Values != null && __isset.values) {
        field.Name = "values";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Values.Count));
          foreach (string _iter59 in Values)
          {
            oprot.WriteString(_iter59);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FacetFilter(");
      sb.Append("MetadataName: ");
      sb.Append(MetadataName);
      sb.Append(",Values: ");
      sb.Append(Values);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
