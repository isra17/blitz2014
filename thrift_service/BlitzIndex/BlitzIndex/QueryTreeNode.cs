/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Represente un noeud dans l'arbre syntaxique de la requete.
  /// 
  /// Voir la documentation pour des exemples.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryTreeNode : TBase
  {
    private string _value;
    private NodeType _type;
    private int _leftPart;
    private int _rightPart;
    private int _id;

    /// <summary>
    /// La valeur du noeud.
    /// 
    /// Par exemple, un noeud dont le type est "OPERATOR" pourrait avoir la valeur "OR",
    /// "AND" ou "NOT". Un noeud dont le type est "LITERAL" pourrait avoir la valeur "Justin Bieber".
    /// </summary>
    public string Value
    {
      get
      {
        return _value;
      }
      set
      {
        __isset.value = true;
        this._value = value;
      }
    }

    /// <summary>
    /// Le type du noeud. Le type influence ce que sera contenu dans "value", "leftPart" et "rightPart".
    /// Voir la documentation pour plus d'information et des exemples.
    /// 
    /// <seealso cref="NodeType"/>
    /// </summary>
    public NodeType Type
    {
      get
      {
        return _type;
      }
      set
      {
        __isset.type = true;
        this._type = value;
      }
    }

    /// <summary>
    /// L'identifiant du noeud representant la partie de gauche de la requete. Si la valeur est -1, il n'y a pas de partie de gauche.
    /// </summary>
    public int LeftPart
    {
      get
      {
        return _leftPart;
      }
      set
      {
        __isset.leftPart = true;
        this._leftPart = value;
      }
    }

    /// <summary>
    /// L'identifiant du noeud representant la partie de droite de la requete. Si la valeur est -1, il n'y a pas de partie de droite.
    /// </summary>
    public int RightPart
    {
      get
      {
        return _rightPart;
      }
      set
      {
        __isset.rightPart = true;
        this._rightPart = value;
      }
    }

    /// <summary>
    /// L'identifiant de ce noeud.
    /// Est necessairement plus grand que zero.
    /// </summary>
    public int Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool value;
      public bool type;
      public bool leftPart;
      public bool rightPart;
      public bool id;
    }

    public QueryTreeNode() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Value = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              Type = (NodeType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              LeftPart = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              RightPart = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I32) {
              Id = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryTreeNode");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Value != null && __isset.value) {
        field.Name = "value";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Value);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.leftPart) {
        field.Name = "leftPart";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(LeftPart);
        oprot.WriteFieldEnd();
      }
      if (__isset.rightPart) {
        field.Name = "rightPart";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(RightPart);
        oprot.WriteFieldEnd();
      }
      if (__isset.id) {
        field.Name = "id";
        field.Type = TType.I32;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryTreeNode(");
      sb.Append("Value: ");
      sb.Append(Value);
      sb.Append(",Type: ");
      sb.Append(Type);
      sb.Append(",LeftPart: ");
      sb.Append(LeftPart);
      sb.Append(",RightPart: ");
      sb.Append(RightPart);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
