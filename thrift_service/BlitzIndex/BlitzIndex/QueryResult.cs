/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Un resultat d'une requete a votre index.
  /// Les resultats doivent etre retournes dans le bon ordre.
  /// Un resultat peut etre soit un Artist ou un Album.
  /// Si documentType est DocumentType.ARTIST, l'identifiant doit etre un identifiant d'artiste.
  /// Si documentType est DocumentType.ALBUM, l'identifiant doit etre un identifiant d'album.
  /// 
  /// Voir la documentation du concours pour savoir ce que signifie "dans le bon ordre".
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryResult : TBase
  {
    private DocumentType _documentType;
    private string _id;

    /// <summary>
    /// Le type du document.
    /// Si documentType est DocumentType.ARTIST, seul artist doit etre rempli.
    /// Si documentType est DocumentType.ALBUM, seul album doit etre rempli.
    /// 
    /// <seealso cref="DocumentType"/>
    /// </summary>
    public DocumentType DocumentType
    {
      get
      {
        return _documentType;
      }
      set
      {
        __isset.documentType = true;
        this._documentType = value;
      }
    }

    /// <summary>
    /// L'identifiant unique du document tel que fournit lors de l'indexation.
    /// </summary>
    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool documentType;
      public bool id;
    }

    public QueryResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I32) {
              DocumentType = (DocumentType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (__isset.documentType) {
        field.Name = "documentType";
        field.Type = TType.I32;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)DocumentType);
        oprot.WriteFieldEnd();
      }
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryResult(");
      sb.Append("DocumentType: ");
      sb.Append(DocumentType);
      sb.Append(",Id: ");
      sb.Append(Id);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
