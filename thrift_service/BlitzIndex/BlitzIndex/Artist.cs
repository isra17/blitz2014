/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Un artiste qui fait de la musique.
  /// Pensez a Justin Bieber.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Artist : TBase
  {
    private string _id;
    private THashSet<string> _name;
    private THashSet<string> _origin;
    private THashSet<string> _active_start;
    private THashSet<string> _active_end;
    private THashSet<string> _genres;
    private THashSet<string> _labels;
    private THashSet<string> _albums;
    private THashSet<string> _group_names;
    private THashSet<string> _instruments_played;
    private string _text;

    /// <summary>
    /// L'identifiant unique pour cet artiste
    /// </summary>
    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// Le nom sous lequel l'artiste est connu
    /// </summary>
    public THashSet<string> Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// Le pays d'origine de l'artiste
    /// </summary>
    public THashSet<string> Origin
    {
      get
      {
        return _origin;
      }
      set
      {
        __isset.origin = true;
        this._origin = value;
      }
    }

    /// <summary>
    /// La date a laquelle l'artiste a commence a etre actif
    /// La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
    /// Voir la documentation pour plus d'information sur les formats de date
    /// </summary>
    public THashSet<string> Active_start
    {
      get
      {
        return _active_start;
      }
      set
      {
        __isset.active_start = true;
        this._active_start = value;
      }
    }

    /// <summary>
    /// La date a laquelle l'artiste a cesse d'etre actif
    /// La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
    /// Voir la documentation pour plus d'information sur les formats de date
    /// </summary>
    public THashSet<string> Active_end
    {
      get
      {
        return _active_end;
      }
      set
      {
        __isset.active_end = true;
        this._active_end = value;
      }
    }

    /// <summary>
    /// Les genre musicaux de cet artiste
    /// </summary>
    public THashSet<string> Genres
    {
      get
      {
        return _genres;
      }
      set
      {
        __isset.genres = true;
        this._genres = value;
      }
    }

    /// <summary>
    /// Les maisons de disque sous lesquelles cet artiste publie
    /// </summary>
    public THashSet<string> Labels
    {
      get
      {
        return _labels;
      }
      set
      {
        __isset.labels = true;
        this._labels = value;
      }
    }

    /// <summary>
    /// Les identifiants uniques des albums de cet artiste
    /// </summary>
    public THashSet<string> Albums
    {
      get
      {
        return _albums;
      }
      set
      {
        __isset.albums = true;
        this._albums = value;
      }
    }

    /// <summary>
    /// Le nom des groupes dont cet artiste est membre
    /// </summary>
    public THashSet<string> Group_names
    {
      get
      {
        return _group_names;
      }
      set
      {
        __isset.group_names = true;
        this._group_names = value;
      }
    }

    /// <summary>
    /// Les instruments que cet artiste joue
    /// </summary>
    public THashSet<string> Instruments_played
    {
      get
      {
        return _instruments_played;
      }
      set
      {
        __isset.instruments_played = true;
        this._instruments_played = value;
      }
    }

    /// <summary>
    /// La description de cet artiste.
    /// La description est extraite de Wikipedia et contient de la
    /// syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
    /// </summary>
    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool origin;
      public bool active_start;
      public bool active_end;
      public bool genres;
      public bool labels;
      public bool albums;
      public bool group_names;
      public bool instruments_played;
      public bool text;
    }

    public Artist() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                Name = new THashSet<string>();
                TSet _set0 = iprot.ReadSetBegin();
                for( int _i1 = 0; _i1 < _set0.Count; ++_i1)
                {
                  string _elem2 = null;
                  _elem2 = iprot.ReadString();
                  Name.Add(_elem2);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                Origin = new THashSet<string>();
                TSet _set3 = iprot.ReadSetBegin();
                for( int _i4 = 0; _i4 < _set3.Count; ++_i4)
                {
                  string _elem5 = null;
                  _elem5 = iprot.ReadString();
                  Origin.Add(_elem5);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                Active_start = new THashSet<string>();
                TSet _set6 = iprot.ReadSetBegin();
                for( int _i7 = 0; _i7 < _set6.Count; ++_i7)
                {
                  string _elem8 = null;
                  _elem8 = iprot.ReadString();
                  Active_start.Add(_elem8);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Active_end = new THashSet<string>();
                TSet _set9 = iprot.ReadSetBegin();
                for( int _i10 = 0; _i10 < _set9.Count; ++_i10)
                {
                  string _elem11 = null;
                  _elem11 = iprot.ReadString();
                  Active_end.Add(_elem11);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                Genres = new THashSet<string>();
                TSet _set12 = iprot.ReadSetBegin();
                for( int _i13 = 0; _i13 < _set12.Count; ++_i13)
                {
                  string _elem14 = null;
                  _elem14 = iprot.ReadString();
                  Genres.Add(_elem14);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Set) {
              {
                Labels = new THashSet<string>();
                TSet _set15 = iprot.ReadSetBegin();
                for( int _i16 = 0; _i16 < _set15.Count; ++_i16)
                {
                  string _elem17 = null;
                  _elem17 = iprot.ReadString();
                  Labels.Add(_elem17);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.Set) {
              {
                Albums = new THashSet<string>();
                TSet _set18 = iprot.ReadSetBegin();
                for( int _i19 = 0; _i19 < _set18.Count; ++_i19)
                {
                  string _elem20 = null;
                  _elem20 = iprot.ReadString();
                  Albums.Add(_elem20);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Set) {
              {
                Group_names = new THashSet<string>();
                TSet _set21 = iprot.ReadSetBegin();
                for( int _i22 = 0; _i22 < _set21.Count; ++_i22)
                {
                  string _elem23 = null;
                  _elem23 = iprot.ReadString();
                  Group_names.Add(_elem23);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Set) {
              {
                Instruments_played = new THashSet<string>();
                TSet _set24 = iprot.ReadSetBegin();
                for( int _i25 = 0; _i25 < _set24.Count; ++_i25)
                {
                  string _elem26 = null;
                  _elem26 = iprot.ReadString();
                  Instruments_played.Add(_elem26);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Artist");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Name.Count));
          foreach (string _iter27 in Name)
          {
            oprot.WriteString(_iter27);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Origin != null && __isset.origin) {
        field.Name = "origin";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Origin.Count));
          foreach (string _iter28 in Origin)
          {
            oprot.WriteString(_iter28);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Active_start != null && __isset.active_start) {
        field.Name = "active_start";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Active_start.Count));
          foreach (string _iter29 in Active_start)
          {
            oprot.WriteString(_iter29);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Active_end != null && __isset.active_end) {
        field.Name = "active_end";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Active_end.Count));
          foreach (string _iter30 in Active_end)
          {
            oprot.WriteString(_iter30);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Genres != null && __isset.genres) {
        field.Name = "genres";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Genres.Count));
          foreach (string _iter31 in Genres)
          {
            oprot.WriteString(_iter31);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Labels != null && __isset.labels) {
        field.Name = "labels";
        field.Type = TType.Set;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Labels.Count));
          foreach (string _iter32 in Labels)
          {
            oprot.WriteString(_iter32);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Albums != null && __isset.albums) {
        field.Name = "albums";
        field.Type = TType.Set;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Albums.Count));
          foreach (string _iter33 in Albums)
          {
            oprot.WriteString(_iter33);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Group_names != null && __isset.group_names) {
        field.Name = "group_names";
        field.Type = TType.Set;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Group_names.Count));
          foreach (string _iter34 in Group_names)
          {
            oprot.WriteString(_iter34);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Instruments_played != null && __isset.instruments_played) {
        field.Name = "instruments_played";
        field.Type = TType.Set;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Instruments_played.Count));
          foreach (string _iter35 in Instruments_played)
          {
            oprot.WriteString(_iter35);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Artist(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Origin: ");
      sb.Append(Origin);
      sb.Append(",Active_start: ");
      sb.Append(Active_start);
      sb.Append(",Active_end: ");
      sb.Append(Active_end);
      sb.Append(",Genres: ");
      sb.Append(Genres);
      sb.Append(",Labels: ");
      sb.Append(Labels);
      sb.Append(",Albums: ");
      sb.Append(Albums);
      sb.Append(",Group_names: ");
      sb.Append(Group_names);
      sb.Append(",Instruments_played: ");
      sb.Append(Instruments_played);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
