/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Un album de musique qui contient des chansons.
  /// Pensez .. au dernier album de Justin Bieber.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Album : TBase
  {
    private string _id;
    private THashSet<string> _name;
    private THashSet<string> _artists;
    private THashSet<string> _release_date;
    private THashSet<string> _genres;
    private THashSet<string> _track_names;
    private string _text;

    /// <summary>
    /// L'identifiant unique de cet album
    /// </summary>
    public string Id
    {
      get
      {
        return _id;
      }
      set
      {
        __isset.id = true;
        this._id = value;
      }
    }

    /// <summary>
    /// Le nom de cet album
    /// </summary>
    public THashSet<string> Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    /// <summary>
    /// Les identifiants uniques des artistes qui ont produit cet album
    /// </summary>
    public THashSet<string> Artists
    {
      get
      {
        return _artists;
      }
      set
      {
        __isset.artists = true;
        this._artists = value;
      }
    }

    /// <summary>
    /// La date a laquelle cet album a ete lance
    /// La date est du format yyyy-MM-dd'T'HH:mm:ssZZZ
    /// Voir la documentation pour plus d'information sur les formats de date
    /// </summary>
    public THashSet<string> Release_date
    {
      get
      {
        return _release_date;
      }
      set
      {
        __isset.release_date = true;
        this._release_date = value;
      }
    }

    /// <summary>
    /// Les genre musicaux de cet album
    /// </summary>
    public THashSet<string> Genres
    {
      get
      {
        return _genres;
      }
      set
      {
        __isset.genres = true;
        this._genres = value;
      }
    }

    /// <summary>
    /// Les titres des chansons sur cet album
    /// </summary>
    public THashSet<string> Track_names
    {
      get
      {
        return _track_names;
      }
      set
      {
        __isset.track_names = true;
        this._track_names = value;
      }
    }

    /// <summary>
    /// La description de cet album.
    /// La description est extraite de Wikipedia et contient de la
    /// syntaxe Mediawiki http://www.mediawiki.org/wiki/Help:Formatting
    /// </summary>
    public string Text
    {
      get
      {
        return _text;
      }
      set
      {
        __isset.text = true;
        this._text = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool id;
      public bool name;
      public bool artists;
      public bool release_date;
      public bool genres;
      public bool track_names;
      public bool text;
    }

    public Album() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Set) {
              {
                Name = new THashSet<string>();
                TSet _set36 = iprot.ReadSetBegin();
                for( int _i37 = 0; _i37 < _set36.Count; ++_i37)
                {
                  string _elem38 = null;
                  _elem38 = iprot.ReadString();
                  Name.Add(_elem38);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.Set) {
              {
                Artists = new THashSet<string>();
                TSet _set39 = iprot.ReadSetBegin();
                for( int _i40 = 0; _i40 < _set39.Count; ++_i40)
                {
                  string _elem41 = null;
                  _elem41 = iprot.ReadString();
                  Artists.Add(_elem41);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Set) {
              {
                Release_date = new THashSet<string>();
                TSet _set42 = iprot.ReadSetBegin();
                for( int _i43 = 0; _i43 < _set42.Count; ++_i43)
                {
                  string _elem44 = null;
                  _elem44 = iprot.ReadString();
                  Release_date.Add(_elem44);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Set) {
              {
                Genres = new THashSet<string>();
                TSet _set45 = iprot.ReadSetBegin();
                for( int _i46 = 0; _i46 < _set45.Count; ++_i46)
                {
                  string _elem47 = null;
                  _elem47 = iprot.ReadString();
                  Genres.Add(_elem47);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.Set) {
              {
                Track_names = new THashSet<string>();
                TSet _set48 = iprot.ReadSetBegin();
                for( int _i49 = 0; _i49 < _set48.Count; ++_i49)
                {
                  string _elem50 = null;
                  _elem50 = iprot.ReadString();
                  Track_names.Add(_elem50);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Text = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Album");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.Set;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Name.Count));
          foreach (string _iter51 in Name)
          {
            oprot.WriteString(_iter51);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Artists != null && __isset.artists) {
        field.Name = "artists";
        field.Type = TType.Set;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Artists.Count));
          foreach (string _iter52 in Artists)
          {
            oprot.WriteString(_iter52);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Release_date != null && __isset.release_date) {
        field.Name = "release_date";
        field.Type = TType.Set;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Release_date.Count));
          foreach (string _iter53 in Release_date)
          {
            oprot.WriteString(_iter53);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Genres != null && __isset.genres) {
        field.Name = "genres";
        field.Type = TType.Set;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Genres.Count));
          foreach (string _iter54 in Genres)
          {
            oprot.WriteString(_iter54);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Track_names != null && __isset.track_names) {
        field.Name = "track_names";
        field.Type = TType.Set;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.String, Track_names.Count));
          foreach (string _iter55 in Track_names)
          {
            oprot.WriteString(_iter55);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Text != null && __isset.text) {
        field.Name = "text";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Text);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Album(");
      sb.Append("Id: ");
      sb.Append(Id);
      sb.Append(",Name: ");
      sb.Append(Name);
      sb.Append(",Artists: ");
      sb.Append(Artists);
      sb.Append(",Release_date: ");
      sb.Append(Release_date);
      sb.Append(",Genres: ");
      sb.Append(Genres);
      sb.Append(",Track_names: ");
      sb.Append(Track_names);
      sb.Append(",Text: ");
      sb.Append(Text);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
