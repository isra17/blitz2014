/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Le resultat complet d'une requete a votre index.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class QueryResponse : TBase
  {
    private List<FacetResult> _facets;
    private List<QueryResult> _results;

    /// <summary>
    /// Toutes les facets pour les resultats obtenus par la requete.
    /// 
    /// Voir la documentation du concours pour plus de details.
    /// </summary>
    public List<FacetResult> Facets
    {
      get
      {
        return _facets;
      }
      set
      {
        __isset.facets = true;
        this._facets = value;
      }
    }

    /// <summary>
    /// Tous les resultats de la requete.
    /// 
    /// Les resultats doivent etre retournes dans le bon ordre.
    /// Voir la documentation du concours pour plus de details.
    /// </summary>
    public List<QueryResult> Results
    {
      get
      {
        return _results;
      }
      set
      {
        __isset.results = true;
        this._results = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool facets;
      public bool results;
    }

    public QueryResponse() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.List) {
              {
                Facets = new List<FacetResult>();
                TList _list72 = iprot.ReadListBegin();
                for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                {
                  FacetResult _elem74 = new FacetResult();
                  _elem74 = new FacetResult();
                  _elem74.Read(iprot);
                  Facets.Add(_elem74);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Results = new List<QueryResult>();
                TList _list75 = iprot.ReadListBegin();
                for( int _i76 = 0; _i76 < _list75.Count; ++_i76)
                {
                  QueryResult _elem77 = new QueryResult();
                  _elem77 = new QueryResult();
                  _elem77.Read(iprot);
                  Results.Add(_elem77);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("QueryResponse");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Facets != null && __isset.facets) {
        field.Name = "facets";
        field.Type = TType.List;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Facets.Count));
          foreach (FacetResult _iter78 in Facets)
          {
            _iter78.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Results != null && __isset.results) {
        field.Name = "results";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Results.Count));
          foreach (QueryResult _iter79 in Results)
          {
            _iter79.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("QueryResponse(");
      sb.Append("Facets: ");
      sb.Append(Facets);
      sb.Append(",Results: ");
      sb.Append(Results);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
