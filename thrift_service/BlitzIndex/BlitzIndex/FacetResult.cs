/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace com.coveo.blitz.thrift
{

  /// <summary>
  /// Une facet et ses valeurs.
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class FacetResult : TBase
  {
    private string _metadataName;
    private List<FacetValue> _values;

    /// <summary>
    /// Le nom du metadata sur lequel la facet est basee (e.g. "Auteur")
    /// </summary>
    public string MetadataName
    {
      get
      {
        return _metadataName;
      }
      set
      {
        __isset.metadataName = true;
        this._metadataName = value;
      }
    }

    /// <summary>
    /// La liste de valeurs associees a ce metadata (e.g. "Justin Bieber" : 5, "Bob Marley" : 3)
    /// </summary>
    public List<FacetValue> Values
    {
      get
      {
        return _values;
      }
      set
      {
        __isset.values = true;
        this._values = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool metadataName;
      public bool values;
    }

    public FacetResult() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              MetadataName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.List) {
              {
                Values = new List<FacetValue>();
                TList _list68 = iprot.ReadListBegin();
                for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                {
                  FacetValue _elem70 = new FacetValue();
                  _elem70 = new FacetValue();
                  _elem70.Read(iprot);
                  Values.Add(_elem70);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("FacetResult");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (MetadataName != null && __isset.metadataName) {
        field.Name = "metadataName";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MetadataName);
        oprot.WriteFieldEnd();
      }
      if (Values != null && __isset.values) {
        field.Name = "values";
        field.Type = TType.List;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Values.Count));
          foreach (FacetValue _iter71 in Values)
          {
            _iter71.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("FacetResult(");
      sb.Append("MetadataName: ");
      sb.Append(MetadataName);
      sb.Append(",Values: ");
      sb.Append(Values);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
